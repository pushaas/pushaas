// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"github.com/pushaas/pushaas/pushaas/models"
	"github.com/pushaas/pushaas/pushaas/services"
	"sync"
)

var (
	lockInstanceServiceMockCreate          sync.RWMutex
	lockInstanceServiceMockDelete          sync.RWMutex
	lockInstanceServiceMockGetByName       sync.RWMutex
	lockInstanceServiceMockGetStatusByName sync.RWMutex
)

// Ensure, that InstanceServiceMock does implement InstanceService.
// If this is not the case, regenerate this file with moq.
var _ services.InstanceService = &InstanceServiceMock{}

// InstanceServiceMock is a mock implementation of InstanceService.
//
//     func TestSomethingThatUsesInstanceService(t *testing.T) {
//
//         // make and configure a mocked InstanceService
//         mockedInstanceService := &InstanceServiceMock{
//             CreateFunc: func(instanceForm *models.InstanceForm) services.InstanceCreationResult {
// 	               panic("mock out the Create method")
//             },
//             DeleteFunc: func(name string) services.InstanceDeletionResult {
// 	               panic("mock out the Delete method")
//             },
//             GetByNameFunc: func(name string) (*models.Instance, services.InstanceRetrievalResult) {
// 	               panic("mock out the GetByName method")
//             },
//             GetStatusByNameFunc: func(name string) services.InstanceStatusResult {
// 	               panic("mock out the GetStatusByName method")
//             },
//         }
//
//         // use mockedInstanceService in code that requires InstanceService
//         // and then make assertions.
//
//     }
type InstanceServiceMock struct {
	// CreateFunc mocks the Create method.
	CreateFunc func(instanceForm *models.InstanceForm) services.InstanceCreationResult

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(name string) services.InstanceDeletionResult

	// GetByNameFunc mocks the GetByName method.
	GetByNameFunc func(name string) (*models.Instance, services.InstanceRetrievalResult)

	// GetStatusByNameFunc mocks the GetStatusByName method.
	GetStatusByNameFunc func(name string) services.InstanceStatusResult

	// calls tracks calls to the methods.
	calls struct {
		// Create holds details about calls to the Create method.
		Create []struct {
			// InstanceForm is the instanceForm argument value.
			InstanceForm *models.InstanceForm
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// Name is the name argument value.
			Name string
		}
		// GetByName holds details about calls to the GetByName method.
		GetByName []struct {
			// Name is the name argument value.
			Name string
		}
		// GetStatusByName holds details about calls to the GetStatusByName method.
		GetStatusByName []struct {
			// Name is the name argument value.
			Name string
		}
	}
}

// Create calls CreateFunc.
func (mock *InstanceServiceMock) Create(instanceForm *models.InstanceForm) services.InstanceCreationResult {
	if mock.CreateFunc == nil {
		panic("InstanceServiceMock.CreateFunc: method is nil but InstanceService.Create was just called")
	}
	callInfo := struct {
		InstanceForm *models.InstanceForm
	}{
		InstanceForm: instanceForm,
	}
	lockInstanceServiceMockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	lockInstanceServiceMockCreate.Unlock()
	return mock.CreateFunc(instanceForm)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//     len(mockedInstanceService.CreateCalls())
func (mock *InstanceServiceMock) CreateCalls() []struct {
	InstanceForm *models.InstanceForm
} {
	var calls []struct {
		InstanceForm *models.InstanceForm
	}
	lockInstanceServiceMockCreate.RLock()
	calls = mock.calls.Create
	lockInstanceServiceMockCreate.RUnlock()
	return calls
}

// Delete calls DeleteFunc.
func (mock *InstanceServiceMock) Delete(name string) services.InstanceDeletionResult {
	if mock.DeleteFunc == nil {
		panic("InstanceServiceMock.DeleteFunc: method is nil but InstanceService.Delete was just called")
	}
	callInfo := struct {
		Name string
	}{
		Name: name,
	}
	lockInstanceServiceMockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	lockInstanceServiceMockDelete.Unlock()
	return mock.DeleteFunc(name)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//     len(mockedInstanceService.DeleteCalls())
func (mock *InstanceServiceMock) DeleteCalls() []struct {
	Name string
} {
	var calls []struct {
		Name string
	}
	lockInstanceServiceMockDelete.RLock()
	calls = mock.calls.Delete
	lockInstanceServiceMockDelete.RUnlock()
	return calls
}

// GetByName calls GetByNameFunc.
func (mock *InstanceServiceMock) GetByName(name string) (*models.Instance, services.InstanceRetrievalResult) {
	if mock.GetByNameFunc == nil {
		panic("InstanceServiceMock.GetByNameFunc: method is nil but InstanceService.GetByName was just called")
	}
	callInfo := struct {
		Name string
	}{
		Name: name,
	}
	lockInstanceServiceMockGetByName.Lock()
	mock.calls.GetByName = append(mock.calls.GetByName, callInfo)
	lockInstanceServiceMockGetByName.Unlock()
	return mock.GetByNameFunc(name)
}

// GetByNameCalls gets all the calls that were made to GetByName.
// Check the length with:
//     len(mockedInstanceService.GetByNameCalls())
func (mock *InstanceServiceMock) GetByNameCalls() []struct {
	Name string
} {
	var calls []struct {
		Name string
	}
	lockInstanceServiceMockGetByName.RLock()
	calls = mock.calls.GetByName
	lockInstanceServiceMockGetByName.RUnlock()
	return calls
}

// GetStatusByName calls GetStatusByNameFunc.
func (mock *InstanceServiceMock) GetStatusByName(name string) services.InstanceStatusResult {
	if mock.GetStatusByNameFunc == nil {
		panic("InstanceServiceMock.GetStatusByNameFunc: method is nil but InstanceService.GetStatusByName was just called")
	}
	callInfo := struct {
		Name string
	}{
		Name: name,
	}
	lockInstanceServiceMockGetStatusByName.Lock()
	mock.calls.GetStatusByName = append(mock.calls.GetStatusByName, callInfo)
	lockInstanceServiceMockGetStatusByName.Unlock()
	return mock.GetStatusByNameFunc(name)
}

// GetStatusByNameCalls gets all the calls that were made to GetStatusByName.
// Check the length with:
//     len(mockedInstanceService.GetStatusByNameCalls())
func (mock *InstanceServiceMock) GetStatusByNameCalls() []struct {
	Name string
} {
	var calls []struct {
		Name string
	}
	lockInstanceServiceMockGetStatusByName.RLock()
	calls = mock.calls.GetStatusByName
	lockInstanceServiceMockGetStatusByName.RUnlock()
	return calls
}

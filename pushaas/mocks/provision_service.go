// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"github.com/pushaas/pushaas/pushaas/models"
	"github.com/pushaas/pushaas/pushaas/services"
	"sync"
)

var (
	lockProvisionServiceMockDispatchDeprovision sync.RWMutex
	lockProvisionServiceMockDispatchProvision   sync.RWMutex
)

// Ensure, that ProvisionServiceMock does implement ProvisionService.
// If this is not the case, regenerate this file with moq.
var _ services.ProvisionService = &ProvisionServiceMock{}

// ProvisionServiceMock is a mock implementation of ProvisionService.
//
//     func TestSomethingThatUsesProvisionService(t *testing.T) {
//
//         // make and configure a mocked ProvisionService
//         mockedProvisionService := &ProvisionServiceMock{
//             DispatchDeprovisionFunc: func(in1 *models.Instance) services.DispatchDeprovisionResult {
// 	               panic("mock out the DispatchDeprovision method")
//             },
//             DispatchProvisionFunc: func(in1 *models.Instance) services.DispatchProvisionResult {
// 	               panic("mock out the DispatchProvision method")
//             },
//         }
//
//         // use mockedProvisionService in code that requires ProvisionService
//         // and then make assertions.
//
//     }
type ProvisionServiceMock struct {
	// DispatchDeprovisionFunc mocks the DispatchDeprovision method.
	DispatchDeprovisionFunc func(in1 *models.Instance) services.DispatchDeprovisionResult

	// DispatchProvisionFunc mocks the DispatchProvision method.
	DispatchProvisionFunc func(in1 *models.Instance) services.DispatchProvisionResult

	// calls tracks calls to the methods.
	calls struct {
		// DispatchDeprovision holds details about calls to the DispatchDeprovision method.
		DispatchDeprovision []struct {
			// In1 is the in1 argument value.
			In1 *models.Instance
		}
		// DispatchProvision holds details about calls to the DispatchProvision method.
		DispatchProvision []struct {
			// In1 is the in1 argument value.
			In1 *models.Instance
		}
	}
}

// DispatchDeprovision calls DispatchDeprovisionFunc.
func (mock *ProvisionServiceMock) DispatchDeprovision(in1 *models.Instance) services.DispatchDeprovisionResult {
	if mock.DispatchDeprovisionFunc == nil {
		panic("ProvisionServiceMock.DispatchDeprovisionFunc: method is nil but ProvisionService.DispatchDeprovision was just called")
	}
	callInfo := struct {
		In1 *models.Instance
	}{
		In1: in1,
	}
	lockProvisionServiceMockDispatchDeprovision.Lock()
	mock.calls.DispatchDeprovision = append(mock.calls.DispatchDeprovision, callInfo)
	lockProvisionServiceMockDispatchDeprovision.Unlock()
	return mock.DispatchDeprovisionFunc(in1)
}

// DispatchDeprovisionCalls gets all the calls that were made to DispatchDeprovision.
// Check the length with:
//     len(mockedProvisionService.DispatchDeprovisionCalls())
func (mock *ProvisionServiceMock) DispatchDeprovisionCalls() []struct {
	In1 *models.Instance
} {
	var calls []struct {
		In1 *models.Instance
	}
	lockProvisionServiceMockDispatchDeprovision.RLock()
	calls = mock.calls.DispatchDeprovision
	lockProvisionServiceMockDispatchDeprovision.RUnlock()
	return calls
}

// DispatchProvision calls DispatchProvisionFunc.
func (mock *ProvisionServiceMock) DispatchProvision(in1 *models.Instance) services.DispatchProvisionResult {
	if mock.DispatchProvisionFunc == nil {
		panic("ProvisionServiceMock.DispatchProvisionFunc: method is nil but ProvisionService.DispatchProvision was just called")
	}
	callInfo := struct {
		In1 *models.Instance
	}{
		In1: in1,
	}
	lockProvisionServiceMockDispatchProvision.Lock()
	mock.calls.DispatchProvision = append(mock.calls.DispatchProvision, callInfo)
	lockProvisionServiceMockDispatchProvision.Unlock()
	return mock.DispatchProvisionFunc(in1)
}

// DispatchProvisionCalls gets all the calls that were made to DispatchProvision.
// Check the length with:
//     len(mockedProvisionService.DispatchProvisionCalls())
func (mock *ProvisionServiceMock) DispatchProvisionCalls() []struct {
	In1 *models.Instance
} {
	var calls []struct {
		In1 *models.Instance
	}
	lockProvisionServiceMockDispatchProvision.RLock()
	calls = mock.calls.DispatchProvision
	lockProvisionServiceMockDispatchProvision.RUnlock()
	return calls
}
